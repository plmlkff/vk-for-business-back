networks:
  back:
    driver: bridge

services:
  postgres:
    container_name: postgres
    image: postgres:17
    networks:
      - back
    ports:
      - 5432:5432
    env_file:
      - .env
    healthcheck:
      start_period: 1s
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]

  minio:
    image: minio/minio:latest
    container_name: minio
    networks:
      - back
    env_file:
      - .env
    command: server ~/minio --console-address :9080
    ports:
      - '9080:9080'
      - '9000:9000'

  backend:
    container_name: spring
    build:
      dockerfile: Dockerfile
    depends_on:
      - postgres
      - minio
    networks:
      - back
    ports:
      - 9090:9090
    working_dir: /boot
    env_file:
      .env
    environment:
      HOST: postgres:5432
      MINIO_HOST: minio:9000
    healthcheck:
      test: "wget --tries=1 -O- localhost:9090/actuator/health | grep UP || exit 1"
      interval: 60s
      timeout: 5s
      retries: 5
      start_period: 120s

  zookeeper:
    image: confluentinc/cp-zookeeper:7.9.0
    healthcheck:
      test: [ "CMD", "nc", "-vz", "localhost", "2181" ]
      interval: 10s
      timeout: 3s
      retries: 3
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181

  kafka:
    image: confluentinc/cp-kafka:7.9.0
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - 29092:29092
    healthcheck:
      test: [ "CMD", "nc", "-vz", "localhost", "9092" ]
      interval: 10s
      timeout: 3s
      retries: 3
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: OUTSIDE://:29092,INTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: OUTSIDE://localhost:29092,INTERNAL://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - 8081:8080
    restart: always
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092

  kafka-topics-generator:
    image: confluentinc/cp-kafka:7.9.0
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:9092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic transaction-events --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:9092 --list
      "
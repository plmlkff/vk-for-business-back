server:
  port: 9090
logging:
  level:
    ru.itmo.blpslab1: debug
spring:
  config:
    import: optional:file:.env[.properties]
  application:
    name: "blps-lab-1"
  datasource:
    url: jdbc:postgresql://${HOST}/${POSTGRES_DB}
    username: ${POSTGRES_USER}
    password: ${POSTGRES_PASSWORD}
    driver-class-name: org.postgresql.Driver
  jpa:
    show-sql: false
    hibernate:
      ddl-auto: validate
  liquibase:
    enabled: true
  jwt:
    life-time: 3600000  # ms
    secret: ${SECRET}
  kafka:
    bootstrap-servers: localhost:29092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        acks: 1
        spring:
          json:
            add:
              type:
                headers: false
    consumer:
      group-id: "transaction-handlers-group-1"
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring:
          json:
            trusted:
              packages: '*'
            value:
              default:
                type: ru.itmo.blpslab1.kafka.event.KafkaMessage
minio:
  bucket: ${MINIO_BUCKET}
  url: http://${MINIO_HOST}
  access-key: ${MINIO_ROOT_USER}
  secret-key: ${MINIO_ROOT_PASSWORD}
kafka-topics:
  transaction-events: ${KAFKA_TOPIC_TRANSACTION_EVENTS}
  death-letter-queue: ${KAFKA_TOPIC_DEATH_LETTER_QUEUE}
stripe:
  api:
    secret: ${STRIPE_API_KEY}
  webhooks:
    secret: ${STRIPE_WEBHOOK_SECRET_KEY}